pipeline {
  agent any
  environment {
    ECR_REPOSITORY = credentials('ECR_REPOSITORY')
    AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }
  
  stages {
    stage('Continuous Integration') {
      steps {
        script {
          echo "Linting repository"
          echo "Running unit tests"
        }
      }
    }

    stage('Login to ECR') {
      steps {
        script {
          sh 'aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com'
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        script {
          sh '''
          python3 -m pip install --upgrade pip setuptools wheel
          pip3 install --timeout 100 --retries 5 --index-url https://pypi.org/simple -r requirements.txt
          '''
        }
      }
    }

    stage('Build Image') {
      steps {
        script {
          sh 'docker build --build-arg PIP_INDEX_URL=https://pypi.org/simple --build-arg PIP_TIMEOUT=100 --build-arg PIP_RETRIES=5 -t ${ECR_REPOSITORY}:latest .'
        }
      }
    }

    stage('Push Image') {
      steps {
        script {
          sh 'docker push ${ECR_REPOSITORY}:latest'
        }
      }
    }

    stage('Continuous Deployment') {
      steps {
        sshagent(['ssh_key']) {
          sh '''
          ssh -o StrictHostKeyChecking=no -l ubuntu 13.49.119.66 '
          cd /home/ubuntu/ && 
          wget https://raw.githubusercontent.com/peteray-dev/Sign-Object-Detection-E2E/refs/heads/master/docker-compose.yml &&
          export IMAGE_NAME=${ECR_REPOSITORY}:latest &&
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com &&
          docker compose up -d '
          '''
        }
      }
    }
  }

  post {
    always {
      sh 'docker system prune -f'
    }
  }
}
